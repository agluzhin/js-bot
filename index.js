require("dotenv").config();
const {
  Bot,
  Keyboard,
  GrammyError,
  HttpError,
  InlineKeyboard,
} = require("grammy");
const { getRandomQuestion, getCorrectAnswer } = require("./utils");

const bot = new Bot(process.env.BOT_API_KEY);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "start".
bot.command("start", async (context) => {
  const startKeyborad = new Keyboard()
    .text("Transformation")
    .text("Technologies")
    .row()
    .text("Random question")
    .resized();

  await context.reply(
    "–ü—Ä–∏–≤–µ—Ç!üëã\n\n–Ø - CTB bot helper. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —É—Å—Ç–Ω—ã–º –æ–ø—Ä–æ—Å–∞–º –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ '<b>–¶–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞</b>'.\n\n–ù—É, –∞ —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö <b>—Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –≤ –æ–±–ª–∞—Å—Ç–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤</b> –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª <b>–ø–µ—Ä–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è</b>: @petrshcherbachenko üìù",
    {
      parse_mode: "HTML",
    }
  );

  await context.reply(
    "–° —á–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ –Ω–∞—á–∞—Ç—å? –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –≤–æ—Å–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá",
    {
      reply_markup: startKeyborad,
    }
  );
});

bot.hears(
  ["Transformation", "Technologies", "Random question"],
  async (context) => {
    const topic = context.message.text.toLowerCase();
    const { question, questionTopic } = getRandomQuestion(topic);

    let inlineKeyboard;

    if (question.hasOptions) {
      const buttonRows = question.options.map((option) => [
        InlineKeyboard.text(
          option.text,
          JSON.stringify({
            type: `${questionTopic}-op`,
            isCorrect: option.isCorrect,
            questionId: question.id,
          })
        ),
      ]);

      inlineKeyboard = InlineKeyboard.from(buttonRows);
    } else {
      inlineKeyboard = new InlineKeyboard().text(
        "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç",
        JSON.stringify({
          type: questionTopic,
          questionId: question.id,
        })
      );
    }

    await context.reply(question.text, {
      reply_markup: inlineKeyboard,
    });
  }
);

bot.on("callback_query:data", async (context) => {
  try {
    const callbackData = JSON.parse(context.callbackQuery.data);

    if (!callbackData.type.includes("op")) {
      const answer = getCorrectAnswer(
        callbackData.type,
        callbackData.questionId
      );
      await context.reply(answer, {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });
      await context.answerCallbackQuery();
      return;
    } else if (callbackData.isCorrect) {
      await context.reply("–í–µ—Ä–Ω–æ ‚úÖ");
      await context.answerCallbackQuery();
      return;
    } else {
      const answer = getCorrectAnswer(
        callbackData.type.split("-")[0],
        callbackData.questionId
      );
      await context.reply(`–ù–µ–≤–µ—Ä–Ω–æ ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}`);
      await context.answerCallbackQuery();
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query:data", error);
    await context.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    await context.answerCallbackQuery();
  }
});

bot.catch((error) => {
  const context = error.context;
  console.error(`Error while handling update ${context.update.update_id}:`);
  const e = error.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }
});

bot.start();
